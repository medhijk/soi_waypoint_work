#!/usr/bin/env python
from __future__ import print_function
import rospy
import sys
from std_msgs.msg import String
from mavros_msgs.msg import WaypointList
from mavros_msgs.srv import SetMode, StreamRate, StreamRateRequest
from mavros_msgs.msg import State


#def callback(data):
#    rospy.loginfo(rospy.get_caller_id() + "heard %s", data.data)

import threading
import argparse
import mavros
from mavros.utils import *
from geometry_msgs.msg import PolygonStamped, Point32
from mavros import command


"""
This is the automated version of running the following commands at the command line
and/or inside the MAVLink autopilot terminal, with MAVLink + roscore + mavros already running:

Installation instructions to set up mavros running with ardupilot can be found on this link: https://github.com/AS4SR/general_info/wiki/ArduPilot:-Instructions-to-set-up-and-run-an-autopilot-using-SITL-and-Gazebo-simulator

MAVLink autopilot (normal operations):
> mode AUTO
> arm throttle
> wp load "name_of_file_with_waypoints.txt"

Example waypoint files are listed under: ~/ardupilot/Tools/autotest/ArudPlane-Missions/
--> the ones we normally use are formatted like "CMAC-toff-loop.txt"
--> these are in lat-long-alt coordinates (with some additional information)
    
    WaypointList = [{frame: 3, command: 16, is_current: 0, autocontinue: 1,param2: 1,param3: 0, param4: 0, x_lat: -35.359467, y_long: 149.161697, z_alt: 99.800003}]


Alternately, at the command line (in three separate terminals):
1$ cd catkin_ws; source devel/setup.bash; rosrun mavros mavsys mode -c auto
2$ cd catkin_ws; source devel/setup.bash; rosrun mavros mavsafety arm
3$ cd catkin_ws; source devel/setup.bash; rosrun mavros mavwp load "name_of_file_with_waypoints.txt"

Now, with this, you just need to run:
$ cd catkin_ws; source devel/setup.bash; rosrun soi_waypoint_work waypoint_node.py
...and it will listen on a ROS topic (channel) called "/UAV1/waypoint_list" for waypoints of type "WaypointList"

You can -test- this ROS node/script at the commadline quickly via a rostopic call, for example:

#WaypointList: $ cd catkin_ws; source devel/setup.bash; rostopic pub -l /UAV1/waypoint_list mavros_msgs/WaypointList '[{frame: 3, command: 16, is_current: 0, autocontinue: 1,param2: 1,param3: 0, param4: 0, x_lat: -35.359467, y_long: 149.161697, z_alt: 99.800003}]'

"""

class WaypointData(object):
    def __init__(self):
        self.mystring = None #"" # unpacked
        self.mystring_ros = WaypointList() # raw format
        self.lock = threading.Lock()

    def callback(self, data):
        self.lock.acquire()
        try: # this looks different depending on the datatype
            self.mystring = data.waypoints
            self.mystring_ros = data
        finally:
            self.lock.release()

    def received_data(self):
        """
        input: (none)
        output: thedata (string)
        
        returns unpacked data that was received,
        NOT in its original ROS format
        """
        self.lock.acquire()
        try:
            thedata = self.mystring
            self.mystring = None
        finally:
            self.lock.release()
        return thedata

    def received_rawdata(self):
        """
        input: (none)
        output: thedata (std_msgs.msg.String)
        
        returns raw data that was received,
        in its original ROS format
        """
        self.lock.acquire()
        try:
            thedata = self.mystring_ros
            self.mystring_ros = WaypointList()
        finally:
            self.lock.release()
        return thedata
            
def waypoint_node():

    rospy.init_node('waypoint_node', anonymous=True)
    #string_in = StringData()
    waypoints_in = WaypointData()
    #rospy.Subscriber("/UAV1/teststring", String, string_in.callback)
    rospy.Subscriber("/UAV1/waypoint_list", WaypointList, waypoints_in.callback)

    print("Waiting for incoming ROS topic data...")

    while (1):
        #hold = string_in.received_data()
        #if hold is None:
        #    pass
        #else: # we have new data
        #    print("String received: %r" % hold)
        hold2 = waypoints_in.received_data()
        if hold2 is None:
            pass
        else: # we have new data
            print("Data2 received: %r" % hold2)


# Loading the waypoints
def do_load(args):
    wps = []
    wps_file = get_wp_file_io(args)
    with args.file:
        wps = [w for w in wps_file.read(args.file)]

    def _load_call(waypoint_list):
        try:
            ret = M.push(waypoints=waypoint_list)
        except rospy.ServiceException as ex:
            fault(ex)

        if not ret.success:
            fault("Request failed. Check mavros logs")

#print_if(args.verbose, "Waypoints transfered:", ret.wp_transfered)


# Setting the mode of the autopilot
def state_cb(state):
        print_if(args.verbose, "Current mode:", state.mode)
        if state.mode == custom_mode:
            print("Mode changed.")
            done_evt.set()
def do_mode(args):
    base_mode = 0
    custom_mode = ''

    if args.custom_mode is not None:
        custom_mode = args.custom_mode.upper()
    if args.base_mode is not None:
        base_mode = args.base_mode

    done_evt = threading.Event()
    def state_cb(state):
        print_if(args.verbose, "Current mode:", state.mode)
        if state.mode == custom_mode:
            print("Mode changed.")
            done_evt.set()


    try:
        set_mode = rospy.ServiceProxy(mavros.get_topic('set_mode'), SetMode)
        ret = set_mode(base_mode=base_mode, custom_mode=custom_mode)
    except rospy.ServiceException as ex:
        fault(ex)

    if not ret.mode_sent:
        fault("Request failed. Check mavros logs")

    if not done_evt.wait(5):
        fault("Timed out!")

# Setting the arm state

def _arm(args, state):
    try:
        ret = command.arming(value=state)
    except rospy.ServiceException as ex:
        fault(ex)

    if not ret.success:
        fault("Request failed. Check mavros logs")

    print_if(args.verbose, "Command result:", ret.result)
    return ret






    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
  
    try:
        waypoint_node()
    #except rospy.shutdown(): #ROSError??? etc.:
    #    sys.exit()
    except:
        pass

    sys.exit(0)

# read from the subscribed topic
   
"""  
  def do_load(args):
      wps = []
      wps_file = get_wp_file_io(args)
      with args.file:
          wps = [w for w in wps_file.read(args.file)]
  
      def _load_call(waypoint_list):
          try:
              ret = M.push(waypoints=waypoint_list)
          except rospy.ServiceException as ex:
              fault(ex)
  
          if not ret.success:
              fault("Request failed. Check mavros logs")
  
  print_if(args.verbose, "Waypoints transfered:", ret.wp_transfered)

  def get_wp_file_io(args):
  return M.QGroundControlWP()

      done_evt = threading.Event()
      def _fix_wp0(topic):
          if len(topic.waypoints) > 0:
              wps[0] = topic.waypoints[0]
              print_if(args.verbose, "HOME location: latitude:", wps[0].x_lat,
                     "longitude:", wps[0].y_long, "altitude:", wps[0].z_alt)
          else:
              print("Failed to get WP0! WP0 will be loaded from file.", file=sys.stderr)

          done_evt.set()

      if not args.preserve_home:
          _load_call(wps)
      else:
          # Note: _load_call() emit publish on this topic, so callback only changes
          # waypoint 0, and signal done event.
          sub = M.subscribe_waypoints(_fix_wp0)
          if not done_evt.wait(30.0):
              fault("Something went wrong. Topic timed out.")
          else:
              sub.unregister()
  _load_call(wps)
"""
